name: Release

on:
  push:
    tags:
      - "2.0a[0-9]+"

jobs:
  build-release:
    name: Build Release

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          # Versioneer only generates correct versions with a full fetch
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Set up Node 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          # Load installed python packages from the cache
          key: ${{ env.pythonLocation }}-${{ hashFiles('requirements*.txt') }}
          
      - name: Install packages
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --upgrade-strategy eager -e .[dev]

      - name: Build UI
        run: |
          prefect dev build-ui 

      - name: Build a binary wheel and a source tarball
        run: |
          python setup.py sdist
          python setup.py bdist_wheel

      - name: Publish build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: built-package
          path: './dist'

  publish-docs:
    name: Open PR to docs branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Checkout current docs
        run: git checkout docs --

      - name: Create a temporary branch
        # the release tag is parsed from the ref
        run: git checkout -b "docs-for-release-${GITHUB_REF#refs/*/}"

      - name: Merge with main
        run: git merge origin/main --no-ff -m "Merge branch 'main' into temporary docs branch"

      - name: Push and open PR
        run: |
          git push --set-upstream origin HEAD
          gh pr create \
            --title "Publish docs from release ${GITHUB_REF#refs/*/}" \
            --body '_automatically created with `gh` cli on merge to `main`_' \
            --base docs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-test-release:
    name: Publish Release to Test PyPI
    needs: [build-release]
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: built-package
          path: './dist'

      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  publish-code:
    name: Open PR to OS Prefect repo
    environment: 'prod'
    needs: [build-release, publish-test-release]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Configure upstream
        run: git remote add prefect-orion https://github.com/PrefectHQ/prefect.git

      - name: Create a temporary branch & merge w/ upstream
        # the release tag is parsed from the ref
        run: |
          git checkout -b "orion-release-${GITHUB_REF#refs/*/}"
          git fetch prefect-orion
          git merge prefect-orion/orion -m "Merge w/ latest upstream changes"

      - name: Push and open PR
        run: |
          git push --set-upstream prefect-orion "orion-release-${GITHUB_REF#refs/*/}"
          gh pr create \
            --title "Publish code from Orion release ${GITHUB_REF#refs/*/}" \
            --body '_automatically created with `gh` cli on merge to `main`_' \
            --base orion
        env:
          GITHUB_TOKEN: ${{ secrets.OS_GITHUB_TOKEN }}

  publish-release:
    name: Publish Release to PyPI
    environment: 'prod'
    needs: [build-release, publish-test-release]
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: built-package
          path: './dist'

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
